@using KafkaAspCoreWebExample.Models
@model List<KafkaMessageViewModel>
@{
    ViewData["Title"] = "接收 Kafka 訊息";
}

<h1>接收 Kafka 訊息</h1>

<div class="mb-3">
    <a asp-action="Index" class="btn btn-secondary">返回</a>
    <a asp-action="Consume" class="btn btn-primary">重新整理</a>
</div>

@if (Model.Any())
{
    <div class="table-responsive">
        <table class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th>接收時間</th>
                    <th>主題</th>
                    <th>鍵值</th>
                    <th>訊息內容</th>
                    <th>偏移量</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var message in Model.OrderByDescending(m => m.ReceivedAt))
                {
                    <tr>
                        <td>@message.ReceivedAt?.ToString("yyyy-MM-dd HH:mm:ss")</td>
                        <td>@message.Topic</td>
                        <td>@message.Key</td>
                        <td>@message.Message</td>
                        <td>@message.Offset</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <div class="alert alert-info">
        尚未接收到任何訊息。請確保消費者服務正在運行，並且已經有訊息發送到訂閱的主題。
    </div>
}

<div class="card mt-4">
    <div class="card-header">
        <h5>使用說明</h5>
    </div>
    <div class="card-body">
        <p>此頁面顯示已從 Kafka 接收的訊息。背景服務正在監聽配置的主題，並將接收到的訊息添加到此列表中。</p>
        <p>點擊「重新整理」按鈕可以更新訊息列表。</p>
        <p><strong>注意</strong>：只顯示最近接收的最多 100 條訊息。</p>
    </div>
</div>